from pprint import pprint
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (ConversationHandler, ContextTypes)

from src.services.telegram.constants import SURVEY_STATES, ALLOWED_SIZES, ALLOWED_STYLES, ALLOWED_CONFIRM


def normalize_input(answer: str) -> str:
    return answer.strip().lower()


async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pprint({"INFO": "start_survey -> ask for SIZE."})
    size_keyboard = [["XS", "S"], ["M", "L", "XL"]]
    reply_markup = ReplyKeyboardMarkup(size_keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üìè –û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–æ–∑–º—ñ—Ä –æ–¥—è–≥—É (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: XS, S, M, L, XL):",
        reply_markup=reply_markup
    )
    return SURVEY_STATES["SIZE"]


async def size_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer_raw = update.message.text
    pprint({"INFO": f"size_handler -> user typed: {answer_raw}"})

    answer_norm = normalize_input(answer_raw)
    allowed_lower = [s.lower() for s in ALLOWED_SIZES]

    if answer_norm not in allowed_lower:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: XS, S, M, L –∞–±–æ XL."
        )
        return SURVEY_STATES["SIZE"]

    index = allowed_lower.index(answer_norm)
    chosen_size = ALLOWED_SIZES[index]
    context.user_data["size"] = chosen_size

    style_keyboard = [["Casual", "Smart Casual"], ["Classic", "Sporty"]]
    reply_markup = ReplyKeyboardMarkup(style_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üëó –û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω–∏–π —Å—Ç–∏–ª—å (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å: Casual, Smart Casual, Classic, Sporty):",
        reply_markup=reply_markup
    )
    return SURVEY_STATES["STYLE"]


async def style_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer_raw = update.message.text
    pprint({"INFO": f"style_handler -> user typed: {answer_raw}"})

    answer_norm = normalize_input(answer_raw)
    allowed_lower = [s.lower() for s in ALLOWED_STYLES]

    if answer_norm not in allowed_lower:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å: Casual, Smart Casual, Classic –∞–±–æ Sporty."
        )
        return SURVEY_STATES["STYLE"]

    index = allowed_lower.index(answer_norm)
    chosen_style = ALLOWED_STYLES[index]
    context.user_data["style"] = chosen_style

    await update.message.reply_text("üé® –Ø–∫—ñ –∫–æ–ª—å–æ—Ä–∏ –≤–∏ —É–Ω–∏–∫–∞—î—Ç–µ? (–≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç)")
    return SURVEY_STATES["COLORS"]


async def colors_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    pprint({"INFO": f"colors_handler -> user typed: {answer}"})

    context.user_data["colors"] = answer
    await update.message.reply_text("üõç –Ø–∫—ñ –±—Ä–µ–Ω–¥–∏ –≤–∞–º –ø–æ–¥–æ–±–∞—é—Ç—å—Å—è? (–≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç)")
    return SURVEY_STATES["BRANDS"]


async def brands_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    pprint({"INFO": f"brands_handler -> user typed: {answer}"})

    context.user_data["brands"] = answer
    await update.message.reply_text("üìè –Ø–∫–∏–π —É –≤–∞—Å –∑—Ä—ñ—Å—Ç (—Å–º)? (–≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç)")
    return SURVEY_STATES["HEIGHT"]


async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    pprint({"INFO": f"height_handler -> user typed: {answer}"})

    context.user_data["height"] = answer
    await update.message.reply_text("‚öñ –Ø–∫–∞ —É –≤–∞—Å –≤–∞–≥–∞ (–∫–≥)? (–≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç)")
    return SURVEY_STATES["WEIGHT"]


async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    pprint({"INFO": f"weight_handler -> user typed: {answer}"})

    context.user_data["weight"] = answer

    summary = (
        f"üìã *–í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:*\n"
        f"‚Ä¢ üìè –†–æ–∑–º—ñ—Ä: {context.user_data['size']}\n"
        f"‚Ä¢ üëó –°—Ç–∏–ª—å: {context.user_data['style']}\n"
        f"‚Ä¢ üé® –£–Ω–∏–∫–Ω–µ–Ω—ñ –∫–æ–ª—å–æ—Ä–∏: {context.user_data['colors']}\n"
        f"‚Ä¢ üõç –ë—Ä–µ–Ω–¥–∏: {context.user_data['brands']}\n"
        f"‚Ä¢ üìè –ó—Ä—ñ—Å—Ç: {context.user_data['height']}\n"
        f"‚Ä¢ ‚öñ –í–∞–≥–∞: {context.user_data['weight']}\n\n"
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ.\n"
        f"–í–µ–¥—ñ—Ç—å –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —Å–∫–∞—Å—É–≤–∞—Ç–∏"
    )

    confirm_keyboard = [["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", "–°–∫–∞—Å—É–≤–∞—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(confirm_keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(summary, parse_mode="Markdown", reply_markup=reply_markup)
    return SURVEY_STATES["CONFIRM"]


async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer_raw = update.message.text.strip()
    pprint({"INFO": f"confirm_handler -> user typed: {answer_raw}"})

    answer_norm = normalize_input(answer_raw)
    allowed_confirms = [x.lower() for x in ALLOWED_CONFIRM]

    if answer_norm not in allowed_confirms:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é' –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
        )
        return SURVEY_STATES["CONFIRM"]

    if answer_norm == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é":
        user_id = update.message.from_user.id
        user_data = context.user_data
        telegram_service = context.bot_data["telegram_service"]
        telegram_service.save_survey(user_id, user_data)

        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ê–Ω–∫–µ—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –î–ª—è –ø–æ–≤—Ç–æ—Ä—É –≤–≤–µ–¥—ñ—Ç—å /start_survey.",
                                        reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()

    return ConversationHandler.END